.container {
  position: relative;
  height: 500px;
  width: 500px;
  background-color: grey;
}

.red {
  height: 100px;
  width: 100px;
  background-color: red;
  position: absolute; /*Absolute positioning positions element wrt its parent elements position */
  right: 100px;
}
/* Absoltue Positoning - An element with position: absolute; is positioned relative to the nearest positioned ancestor / parent element (instead of positioned relative to the viewport, like fixed).

However; if an absolute positioned element has no positioned ancestors (parent element), it uses the document body (body element), and moves along with page scrolling.

Note: Absolute positioned elements are removed from the normal flow, and can overlap elements.

*/

.blue {
  height: 100px;
  width: 100px;
  background-color: blue;
  position: relative; /* Relative positioning positions from original position of the object */
  left: 100px;
  top: 100px;
}
/* Relative Positioning - An element with position: relative; is positioned relative to its normal position.

Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.

*/

/* Static Positioning - HTML elements are positioned static by default.

Static positioned elements are not affected by the top, bottom, left, and right properties.

*/

/* Fixed Positioning - An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.

A fixed element does not leave a gap in the page where it would normally have been located.

*/
.yellow {
  height: 100px;
  width: 100px;
  background-color: yellow;
  position: absolute;
  top: 700px;
}

body {
  margin: 0;
  padding: 0;
}
